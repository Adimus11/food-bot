// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package conn_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngridientsServiceClient is the client API for IngridientsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngridientsServiceClient interface {
	GetIngridients(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*Ingridients, error)
}

type ingridientsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngridientsServiceClient(cc grpc.ClientConnInterface) IngridientsServiceClient {
	return &ingridientsServiceClient{cc}
}

func (c *ingridientsServiceClient) GetIngridients(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*Ingridients, error) {
	out := new(Ingridients)
	err := c.cc.Invoke(ctx, "/foodbot_grpc.IngridientsService/GetIngridients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngridientsServiceServer is the server API for IngridientsService service.
// All implementations must embed UnimplementedIngridientsServiceServer
// for forward compatibility
type IngridientsServiceServer interface {
	GetIngridients(context.Context, *UserInput) (*Ingridients, error)
	mustEmbedUnimplementedIngridientsServiceServer()
}

// UnimplementedIngridientsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngridientsServiceServer struct {
}

func (UnimplementedIngridientsServiceServer) GetIngridients(context.Context, *UserInput) (*Ingridients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngridients not implemented")
}
func (UnimplementedIngridientsServiceServer) mustEmbedUnimplementedIngridientsServiceServer() {}

// UnsafeIngridientsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngridientsServiceServer will
// result in compilation errors.
type UnsafeIngridientsServiceServer interface {
	mustEmbedUnimplementedIngridientsServiceServer()
}

func RegisterIngridientsServiceServer(s grpc.ServiceRegistrar, srv IngridientsServiceServer) {
	s.RegisterService(&IngridientsService_ServiceDesc, srv)
}

func _IngridientsService_GetIngridients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngridientsServiceServer).GetIngridients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foodbot_grpc.IngridientsService/GetIngridients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngridientsServiceServer).GetIngridients(ctx, req.(*UserInput))
	}
	return interceptor(ctx, in, info, handler)
}

// IngridientsService_ServiceDesc is the grpc.ServiceDesc for IngridientsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngridientsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foodbot_grpc.IngridientsService",
	HandlerType: (*IngridientsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIngridients",
			Handler:    _IngridientsService_GetIngridients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "communication.proto",
}
